<?php

namespace App\Controller;

use Doctrine\ORM\EntityManagerInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use App\Repository\FoodRepository;
use App\Repository\CategoryRepository;
use App\Entity\Food;
use App\Form\CommentFormType;
use App\Form\FoodFormType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Validator\Constraints\DateTime;

class FoodController extends AbstractController
{
    /**
     * @Route("/menu", name="menu")
     * @param Request $request
     * @param FoodRepository $foodRepository
     * @param EntityManagerInterface $entityManager
     * @param CategoryRepository $categoryRepository
     * @return Response
     */
    public function menu(Request $request, FoodRepository $foodRepository, EntityManagerInterface $entityManager, CategoryRepository $categoryRepository)
    {
        $category = $categoryRepository->findAll();
        $form = $this->createForm(FoodFormType::class, null, ['category' => $category]);
        $form->handleRequest($request);
        if ($this->isGranted('ROLE_ADMIN') && ($form->isSubmitted() && $form->isValid())) {
            $food = $form->getData();
            $entityManager->persist($food);
            $entityManager->flush();
            $this->addFlash('success', 'New food created!');
            return $this->redirectToRoute('menu');
        }
        $foods = $foodRepository->findAll();

        return $this->render('menu/index.html.twig', [
            'form' => $form->createView(),
            'foods' => $foods
        ]);
    }

    /**
     * @Symfony\Component\Routing\Annotation\Route("/food/{id}", name="food_view", requirements={"id":"\d+"})
     * @param               Food $food
     * @param               Request $request
     * @param               EntityManagerInterface $entityManager
     * @return                \Symfony\Component\HttpFoundation\Response
     * @throws \Exception
     */
    public function show(
        Food $food,
        Request $request,
        EntityManagerInterface $entityManager
    ) {
        $form = $this->createForm(CommentFormType::class);
        $form->handleRequest($request);
        if ($this->isGranted('ROLE_USER') && $form->isSubmitted() && $form->isValid()) {
            /**
             * @var Comment $comment
             */
            $comment = $form->getData();
            $comment->setUser($this->getUser());
            $food->addComment($comment);
            $date = new \DateTime("now");
            $comment->setCreatedAt($date);
            $entityManager->flush();
            return $this->redirectToRoute(
                'food_view',
                [
                    'id' => $food->getId()
                ]
            );
        }
        
        return $this->render(
            'menu/view.html.twig',
            [
                'food' => $food,
                'commentForm' => $form->createView()
            ]
        );
    }

    /**
     * @Symfony\Component\Routing\Annotation\Route("/food/{id}/delete", name="food_delete")
     * @param                      Food $food
     * @param                      EntityManagerInterface $entityManager
     * @return                     \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function deleteFood(Food $food, EntityManagerInterface $entityManager)
    {
        if ($this->isGranted('ROLE_ADMIN')) {
            $entityManager->remove($food);
            $entityManager->flush();
            $this->addFlash('success', 'Successfully deleted!');
            return $this->redirectToRoute('menu');
        } else {
            return $this->redirectToRoute('menu');
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}